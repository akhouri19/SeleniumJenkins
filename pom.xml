<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>MyCucumberSelenium</groupId>
  <artifactId>MyCucumberSelenium</artifactId>
  <version>0.0.1-SNAPSHOT</version>

 


<properties>

 <maven.compiler.source>1.8</maven.compiler.source>
 <maven.compiler.target>1.8</maven.compiler.target>


</properties>

<dependencies>
<!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-java -->
<dependency>
    <groupId>io.cucumber</groupId>
    <artifactId>cucumber-java</artifactId>
    <version>4.8.1</version>
</dependency>


<!-- https://mvnrepository.com/artifact/junit/junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.13.2</version>
    <scope>test</scope>
</dependency>

<dependency>
<groupId>com.google.guava</groupId>
<artifactId>guava</artifactId>
<version>27.0.1-jre</version>
</dependency>


<!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-junit -->
<dependency>
    <groupId>io.cucumber</groupId>
    <artifactId>cucumber-junit</artifactId>
    <version>4.8.1</version>
    <scope>test</scope>
</dependency>

<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>4.0.0-alpha-1</version>
</dependency>

<!-- https://mvnrepository.com/artifact/net.masterthought/maven-cucumber-reporting -->
<dependency>
    <groupId>net.masterthought</groupId>
    <artifactId>maven-cucumber-reporting</artifactId>
    <version>3.14.0</version>
</dependency>

              

</dependencies>

<build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.0</version>
                <configuration>
                    <testFailureIgnore>true</testFailureIgnore>
                   <includes>
                                <include>**/TestRunner.java</include>
                            </includes>
                </configuration>
            </plugin>
            	<plugin>
<groupId>net.masterthought</groupId>
<artifactId>maven-cucumber-reporting</artifactId>
<version>2.8.0</version>
<executions>
<execution>
<id>execution</id>
<phase>test</phase>
<goals>
<goal>generate</goal>
</goals>
<configuration>
<projectName>MyCucumberSelenium</projectName>
<outputDirectory>${project.build.directory}/Report/cucumber-reports</outputDirectory>
<cucumberOutput>${project.build.directory}/cucumber/cucumber.json</cucumberOutput>
<skippedFails>true</skippedFails>
<enableFlashCharts>false</enableFlashCharts>
</configuration>
</execution>
</executions>
</plugin>
      <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>
					<encoding>UTF-8</encoding>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>


        </plugins>

<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.kuali.maven.plugins
										</groupId>
										<artifactId>
											properties-maven-plugin
										</artifactId>
										<versionRange>
											[2.0.1,)
										</versionRange>
										<goals>
											<goal>
												write-project-properties
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>

<plugin>
				<groupId>com.github.temyers</groupId>
				<artifactId>cucumber-jvm-parallel-plugin</artifactId>
				<version>5.0.0</version>
				<executions>
					<execution>
						<id>generateRunners</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>generateRunners</goal>
						</goals>
						<configuration>
							<!-- Mandatory -->
							<!-- List of package names to scan for glue code. -->
							<glue>
								<package>StepDefination</package>
							</glue>
							<!-- These are optional, with the default values -->
							<!-- Where to output the generated tests -->
							<outputDirectory>${project.build.directory}/generated-test-sources/cucumber</outputDirectory>
							<!-- The directory, which must be in the root of the runtime classpath, 
								containing your feature files. -->
							<featuresDirectory>src/test/resources/</featuresDirectory>
							<!-- Directory where the cucumber report files shall be written -->
							<cucumberOutputDir>target/cucumber-reports</cucumberOutputDir>
							<!-- <cucumberOutputDir>target/cucumber-parallel</cucumberOutputDir> -->
							<!-- List of cucumber plugins. When none are provided the json formatter 
								is used. For more advanced usage see section about configuring cucumber plugins -->
							<plugins>
								<plugin>
									<name>json</name>
								</plugin>
							</plugins>

							<!-- CucumberOptions.strict property -->
							<strict>true</strict>
							<!-- CucumberOptions.monochrome property -->
							<monochrome>true</monochrome>
							<!-- The tags to run, maps to CucumberOptions.tags property. Default 
								is no tags. -->
							<tags>
								<tag>${tags}</tag>
								<tag>~@ignore</tag>
								<!-- <tag>@sh_register_DE or @sh_homeDoc</tag> <tag>@sh_tc_addressbook 
									@sh_homeDoc</tag> -->
							</tags>
							<!-- Generate TestNG runners instead of JUnit ones. -->
							<useTestNG>false</useTestNG>
							<!-- The naming scheme to use for the generated test classes. One 
								of 'simple' or 'feature-title' -->
							<namingScheme>feature-title</namingScheme>
							<!-- The class naming pattern to use. Only required/used if naming 
								scheme is 'pattern'. -->
							<namingPattern>Parallel{c}IT</namingPattern>
							<!-- One of [SCENARIO, FEATURE]. SCENARIO generates one runner per 
								scenario. FEATURE generates a runner per feature. -->
							<parallelScheme>FEATURE</parallelScheme>
						</configuration>
					</execution>
				</executions>
			</plugin>
			</plugins>
		</pluginManagement>


           
    </build>

</project>